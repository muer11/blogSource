(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{389:function(e,l,t){"use strict";t.r(l);var n=t(45),r=Object(n.a)({},(function(){var e=this,l=e.$createElement,t=e._self._c||l;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" Promise")]),e._v(" "),t("h2",{attrs:{id:"一、-基本介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、-基本介绍"}},[e._v("#")]),e._v(" 一、 基本介绍")]),e._v(" "),t("ol",[t("li",[e._v("是什么？\n"),t("ol",[t("li",[e._v("它是一个构造函数，其中包含all、resolve、reject方法，原型上有then、catch等方法。（如何判断这些方法是在构造函数中还是原型中？？？）")]),e._v(" "),t("li",[e._v("三种状态\n"),t("ol",[t("li",[e._v("pending（初始值）")]),e._v(" "),t("li",[e._v("resolve（返回成功值）")]),e._v(" "),t("li",[e._v("reject（返回失败原因reason）")])])]),e._v(" "),t("li",[e._v("可链式调用\n"),t("ol",[t("li",[e._v("因为每个Promise的返回值是一个保存了当前状态的Promise，通过维护状态、传递状态的方式使得回调函数能够及时调用，比callback简单、灵活的多。")])])])])]),e._v(" "),t("li",[e._v("为什么需要它？它的好处是什么？\n"),t("ol",[t("li",[e._v("解决callback的回调地狱问题，使得代码更易维护，")]),e._v(" "),t("li",[e._v("解决多个并发请求，获取请求后的结果")]),e._v(" "),t("li",[e._v("解决异步的问题")])])]),e._v(" "),t("li",[e._v("运用？\n"),t("ol",[t("li",[e._v("接口请求")]),e._v(" "),t("li",[e._v("支付流程")]),e._v(" "),t("li",[e._v("微信小程序图片下载后绘制")])])]),e._v(" "),t("li",[e._v("用法：\n"),t("ol",[t("li",[t("p",[e._v("resolve")])]),e._v(" "),t("li",[t("p",[e._v("reject")])]),e._v(" "),t("li",[t("p",[e._v("then")])]),e._v(" "),t("li",[t("p",[e._v("catch")])]),e._v(" "),t("li",[t("p",[e._v("all")]),e._v(" "),t("ol",[t("li",[e._v("数组中的所有请求完成后才会返回")]),e._v(" "),t("li",[e._v("使用场景：所有接口都请求成功后才处理接下来的逻辑")])])]),e._v(" "),t("li",[t("p",[e._v("race")]),e._v(" "),t("ol",[t("li",[e._v("若有一个已请求完成就返回值")]),e._v(" "),t("li",[e._v("使用场景：某些接口请求超时后返回超时信息，比如图片下载超时的提示(可以研究一下axios、fetch框架中的timeout是如何实现的）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//请求某个图片资源\nfunction requestImg(){\n    var p = new Promise((resolve, reject) => {\n        var img = new Image();\n        img.onload = function(){\n            resolve(img);\n        }\n        img.src = '图片的路径';\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout(){\n    var p = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            reject('图片请求超时');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise.race([requestImg(), timeout()]).then((data) =>{\n    console.log(data);\n}).catch((err) => {\n    console.log(err);\n});\n")])])])]),e._v(" "),t("li")])])]),e._v(" "),t("h2",{attrs:{id:"二、如何实现一个-promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、如何实现一个-promise"}},[e._v("#")]),e._v(" 二、如何实现一个 Promise")])])}),[],!1,null,null,null);l.default=r.exports}}]);